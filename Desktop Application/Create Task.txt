using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using Truck_management_system.model;
using System.IO.Ports;

namespace Truck_management_system.Admin.Booking
{
    public partial class add_task : Form
    {
        private static readonly IMongoCollection<employee_model> employee_collection = partial_data.db.GetCollection<employee_model>("employee");
        private static readonly IMongoCollection<task_model> task_collection = partial_data.db.GetCollection<task_model>("task");
        private static readonly IMongoCollection<truck_model> truck_collection = partial_data.db.GetCollection<truck_model>("truck");
        private static readonly IMongoCollection<collab_model> collab_collection = partial_data.db.GetCollection<collab_model>("collaborator");
        private static readonly IMongoCollection<item_model> item_collection = partial_data.db.GetCollection<item_model>("items");

        private readonly manage_task f1;

        private SerialPort serialPort;

        public add_task(manage_task frm)
        {
            InitializeComponent();
            f1 = frm;
            this.Load += AddTask_Load;
            driverIdCmb.SelectedIndexChanged += DriverIdCmb_SelectedIndexChanged;
            assIdCmb.SelectedIndexChanged += AssIdCmb_SelectedIndexChanged;
            truckCmb.SelectedIndexChanged += TruckCmb_SelectedIndexChanged;
            companyCmb.SelectedIndexChanged += companyCmb_SelectedIndexChanged;


            InitializeSerialPort();
            PopulateCOMPorts();
        }

        private void InitializeSerialPort()
        {
            serialPort = new SerialPort();
            serialPort.BaudRate = 9600;  // Typical BaudRate for SIM800C
            serialPort.DataBits = 8;
            serialPort.StopBits = StopBits.One;
            serialPort.Parity = Parity.None;
            serialPort.DtrEnable = true;  // Enable DTR for proper operation with the GSM module
            serialPort.RtsEnable = true;  // Enable RTS for handshaking
        }

        // Populate the COM ports in the ComboBox
        private void PopulateCOMPorts()
        {
            var availablePorts = SerialPort.GetPortNames();
            foreach (var port in availablePorts)
            {
                txtPort.Items.Add(port); // Populate ComboBox with available COM ports
            }

            if (availablePorts.Length > 0)
            {
                txtPort.SelectedIndex = 0; // Auto-select the first available COM port
            }
        }


        private async void AddTask_Load(object sender, EventArgs e)
        {
            await InitializeFormAsync();
        }

        private async Task InitializeFormAsync()
        {
            try
            {
                await InitializeItemComboBox();
                await LoadTruckNumbersAsync();
                await LoadEmployeeComboBoxesAsync();
                await InitializeCompanyComboBox();
            }
            catch
            {
                MessageBox.Show("Error initializing form. Please try again.");
            }
        }

        private async Task InitializeItemComboBox()
        {
            try
            {
                var items = await item_collection.Find(FilterDefinition<item_model>.Empty).ToListAsync();
                itemCmb.Items.Clear();

                if (items.Any())
                {
                    itemCmb.Items.AddRange(items.Select(i => i.item_type).ToArray());
                }
                else
                {
                    itemCmb.Items.Add("No items available");
                    MessageBox.Show("No items are available. Please add items to the system.");
                }

                itemCmb.SelectedIndex = -1;
            }
            catch
            {
                MessageBox.Show("Error loading items. Please try again.");
            }
        }

        private async Task LoadTruckNumbersAsync()
        {
            try
            {
                var filter = Builders<truck_model>.Filter.Eq(t => t.status, 0);
                var trucks = await truck_collection.Find(filter).ToListAsync();
                truckCmb.Items.Clear();

                if (trucks.Any())
                {
                    truckCmb.Items.AddRange(trucks.Select(t => t.truck_no).ToArray());
                }
                else
                {
                    truckCmb.Items.Add("No trucks available");
                    MessageBox.Show("No trucks are available. Please add trucks to the system.");
                }
            }
            catch
            {
                MessageBox.Show("Error loading trucks. Please try again.");
            }
        }

        private async Task LoadEmployeeComboBoxesAsync()
        {
            try
            {
                var drivers = await GetAvailableEmployeesByRoleAsync("Driver");
                var assistants = await GetAvailableEmployeesByRoleAsync("Assistance Driver");

                if (!drivers.Any())
                {
                    MessageBox.Show("No drivers are available. Please add drivers to the system.");
                }

                if (!assistants.Any())
                {
                    MessageBox.Show("No assistance drivers are available. Please add assistance drivers to the system.");
                }

                drivers.Insert(0, new employee_model { employee_id = "Select", firstname = "Select" });
                assistants.Insert(0, new employee_model { employee_id = "Select", firstname = "Select" });

                driverIdCmb.DataSource = drivers;
                driverIdCmb.DisplayMember = "employee_id";
                driverIdCmb.ValueMember = "employee_id";

                assIdCmb.DataSource = assistants;
                assIdCmb.DisplayMember = "employee_id";
                assIdCmb.ValueMember = "employee_id";

                driverIdCmb.SelectedIndex = 0;
                assIdCmb.SelectedIndex = 0;
            }
            catch
            {
                MessageBox.Show("Error loading employee combo boxes. Please try again.");
            }
        }

        private async Task<List<employee_model>> GetAvailableEmployeesByRoleAsync(string role)
        {
            try
            {
                var filter = Builders<employee_model>.Filter.And(
                    Builders<employee_model>.Filter.Eq(emp => emp.status, 0),
                    Builders<employee_model>.Filter.Eq(emp => emp.role, role)
                );

                return await employee_collection.Find(filter).ToListAsync();
            }
            catch
            {
                return new List<employee_model>();
            }
        }

        private async Task InitializeCompanyComboBox()
        {
            try
            {
                var collaborators = await collab_collection.Find(FilterDefinition<collab_model>.Empty).ToListAsync();
                companyCmb.Items.Clear();

                if (collaborators.Any())
                {
                    companyCmb.Items.AddRange(collaborators.Select(c => c.company_name).ToArray());
                }
                else
                {
                    companyCmb.Items.Add("No companies available");
                    MessageBox.Show("No companies are available. Please add companies to the system.");
                }

                companyCmb.SelectedIndex = -1;
            }
            catch
            {
                MessageBox.Show("Error loading companies. Please try again.");
            }
        }

        private async void companyCmb_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                var selectedCompanyName = companyCmb.SelectedItem?.ToString();

                if (!string.IsNullOrEmpty(selectedCompanyName))
                {
                    var company = await GetCompanyByNameAsync(selectedCompanyName);
                    if (company != null)
                    {
                        DisteTxt.Text = company.address;
                    }
                    else
                    {
                        DisteTxt.Text = "Not Found";
                    }
                }
                else
                {
                    DisteTxt.Text = "Select a company";
                }
            }
            catch
            {
                MessageBox.Show("Error retrieving company address. Please try again.");
            }
        }

        private async Task<collab_model> GetCompanyByNameAsync(string companyName)
        {
            try
            {
                var filter = Builders<collab_model>.Filter.Eq(c => c.company_name, companyName);
                return await collab_collection.Find(filter).FirstOrDefaultAsync();
            }
            catch
            {
                return null;
            }
        }
        private async Task<employee_model> GetEmployeeByIdAsync(string employeeId)
        {
            if (string.IsNullOrEmpty(employeeId))
            {
                return null;
            }

            try
            {
                var filter = Builders<employee_model>.Filter.Eq(emp => emp.employee_id, employeeId);
                return await employee_collection.Find(filter).FirstOrDefaultAsync();
            }
            catch
            {
                return null;
            }
        }


        private async void DriverIdCmb_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                var selectedDriverId = driverIdCmb.SelectedValue?.ToString();

                if (!string.IsNullOrEmpty(selectedDriverId) && selectedDriverId != "Select")
                {
                    var driver = await GetEmployeeByIdAsync(selectedDriverId);
                    if (driver != null)
                    {
                        var fullName = $"{driver.firstname} {driver.midlename} {driver.lastname}".Trim();
                        Dnametxt.Text = fullName;

                        // Fetch the driver's contact number and update txtNumber
                        var driverContactNumber = driver.contact_no;
                        if (!string.IsNullOrEmpty(driverContactNumber))
                        {
                            // Update txtNumber with the driver's contact number
                            txtNumber.Text = driverContactNumber;
                        }
                        else
                        {
                            txtNumber.Text = "No contact number available";
                        }
                    }
                    else
                    {
                        Dnametxt.Text = "Not Found";
                        txtNumber.Text = "No contact number available";
                    }
                }
                else
                {
                    Dnametxt.Text = "Select a driver";
                    txtNumber.Text = string.Empty;  // Clear the contact number if no driver is selected
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error retrieving driver details. Please try again. " + ex.Message);
            }
        }

        private async void AssIdCmb_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                var selectedAssistantId = assIdCmb.SelectedValue?.ToString();

                if (!string.IsNullOrEmpty(selectedAssistantId) && selectedAssistantId != "Select")
                {
                    var assistant = await GetEmployeeByIdAsync(selectedAssistantId);
                    if (assistant != null)
                    {
                        var fullName = $"{assistant.firstname} {assistant.midlename} {assistant.lastname}".Trim();
                        assNametxt.Text = fullName;

                        // Fetch the assistant's contact number and update txtNumber
                        var assistantContactNumber = assistant.contact_no;
                        if (!string.IsNullOrEmpty(assistantContactNumber))
                        {
                            // Append the assistant's contact number to txtNumber (only if driver contact exists as well)
                            if (string.IsNullOrEmpty(txtNumber.Text))
                            {
                                txtNumber.Text = assistantContactNumber;
                            }
                            else
                            {
                                txtNumber.Text += $", {assistantContactNumber}";
                            }
                        }
                        else
                        {
                            // If no assistant contact number available, append "No contact number available"
                            if (string.IsNullOrEmpty(txtNumber.Text))
                            {
                                txtNumber.Text = "No contact number available";
                            }
                            else
                            {
                                txtNumber.Text += ", No contact number available";
                            }
                        }
                    }
                    else
                    {
                        assNametxt.Text = "Not Found";
                        // Reset contact number when assistant is not found
                        if (string.IsNullOrEmpty(txtNumber.Text) || txtNumber.Text == "No contact number available")
                        {
                            txtNumber.Text = "No contact number available";  // Reset to default if both are missing
                        }
                    }
                }
                else
                {
                    assNametxt.Text = "Select an assistant";
                    // Clear the contact number if no assistant is selected
                    if (string.IsNullOrEmpty(Dnametxt.Text) || Dnametxt.Text == "Select a driver")
                    {
                        txtNumber.Text = string.Empty;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error retrieving assistant details. Please try again. " + ex.Message);
            }
        }



        // Function to check if txtNumber contains at least two valid phone numbers
        private async void button1_Click(object sender, EventArgs e)
        {
            try
            {
                // Collect form data
                var selectedTruckNo = truckCmb.SelectedItem?.ToString();
                var selectedDriverId = driverIdCmb.SelectedValue?.ToString();
                var selectedAssistantId = assIdCmb.SelectedValue?.ToString();
                var distance = DisteTxt.Text;
                var selectedItemType = itemCmb.SelectedItem?.ToString();
                var cubicMetersInput = cubicmeterTXT.Text;
                var estimatedTime = dateTimePicker1.Value;

                // Validate form data
                if (string.IsNullOrEmpty(selectedTruckNo) || selectedTruckNo == "Select" ||
                    string.IsNullOrEmpty(selectedDriverId) || selectedDriverId == "Select" ||
                    string.IsNullOrEmpty(selectedAssistantId) || selectedAssistantId == "Select" ||
                    string.IsNullOrEmpty(selectedItemType) ||
                    string.IsNullOrEmpty(cubicMetersInput) ||
                    string.IsNullOrEmpty(estimatedTime.ToString()))
                {
                    MessageBox.Show("Please select all required fields.");
                    return;
                }

                if (!double.TryParse(cubicMetersInput, out var cubicMeters) || cubicMeters <= 0)
                {
                    MessageBox.Show("Please enter a valid cubic meter value.");
                    return;
                }

                var itemFilter = Builders<item_model>.Filter.Eq(i => i.item_type, selectedItemType);
                var item = await item_collection.Find(itemFilter).FirstOrDefaultAsync();

                if (item == null || item.cubic_meter < cubicMeters)
                {
                    MessageBox.Show("Not enough cubic meters available.");
                    return;
                }

                item.cubic_meter -= cubicMeters;
                var itemUpdate = Builders<item_model>.Update.Set(i => i.cubic_meter, item.cubic_meter);
                await item_collection.UpdateOneAsync(itemFilter, itemUpdate);

                var taskNo = new Random().Next(10000000, 99999999).ToString();
                var driver = await GetEmployeeByIdAsync(selectedDriverId);
                var assistant = await GetEmployeeByIdAsync(selectedAssistantId);

                if (driver == null || assistant == null)
                {
                    MessageBox.Show("Driver or assistant not found.");
                    return;
                }

                var task = new task_model
                {
                    task_no = taskNo,
                    truck_no = selectedTruckNo,
                    driver_id = selectedDriverId,
                    assistant_id = selectedAssistantId,
                    driver_name = $"{driver.firstname} {driver.midlename} {driver.lastname}".Trim(),
                    assistant_name = $"{assistant.firstname} {assistant.midlename} {assistant.lastname}".Trim(),
                    destination = distance,
                    item = selectedItemType,
                    cubic_meter = cubicMetersInput,
                    company_name = companyCmb.SelectedItem?.ToString(),
                    estimated_time = estimatedTime.ToString("h:mm tt"),
                    created_at = DateTime.UtcNow,
                };

                // Validate phone numbers
                if (!HasAtLeastTwoPhoneNumbers(txtNumber.Text))
                {
                    MessageBox.Show("Please provide at least two valid phone numbers.");
                    return;
                }

                await task_collection.InsertOneAsync(task);

                // Update truck and employee status asynchronously
                await UpdateTruckStatus(selectedTruckNo);
                await UpdateEmployeeStatus(selectedDriverId);
                await UpdateEmployeeStatus(selectedAssistantId);

                // Construct SMS message
                string message = $"New task assigned. Accept immediately:\n" +
                                 $"Task No: {taskNo}\n" +
                                 $"Truck No: {selectedTruckNo}\n" +
                                 $"Item: {selectedItemType}\n" +
                                 $"Cubic Meters: {cubicMetersInput}\n" +
                                 $"Estimated Time: {estimatedTime:h:mm tt}\n" +
                                 $"Distance: {distance}";

                // Send SMS concurrently
                bool messageSent = await SendSmsToRecipientsConcurrently(txtNumber.Text.Trim(), txtPort.Text, message);

                string messageBoxContent = "Task created successfully!";
                messageBoxContent += messageSent ? "\nMessage(s) sent successfully!" : "\nError in sending messages.";

                MessageBox.Show(messageBoxContent);
                f1.LoadTask();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }

            ClearForm();
        }

        // Method to update the truck status
        private async Task UpdateTruckStatus(string truckNo)
        {
            var truckFilter = Builders<truck_model>.Filter.Eq(t => t.truck_no, truckNo);
            var truckUpdate = Builders<truck_model>.Update.Set(t => t.status, 1); // assuming 1 represents "active"
            await truck_collection.UpdateOneAsync(truckFilter, truckUpdate);
        }

        // Method to update the employee status (either driver or assistant)
        private async Task UpdateEmployeeStatus(string employeeId)
        {
            var employeeFilter = Builders<employee_model>.Filter.Eq(emp => emp.employee_id, employeeId);
            var employeeUpdate = Builders<employee_model>.Update.Set(emp => emp.status, 1); // assuming 1 represents "active"
            await employee_collection.UpdateOneAsync(employeeFilter, employeeUpdate);
        }

        // Method to send SMS to multiple phone numbers concurrently
        private async Task<bool> SendSmsToRecipientsConcurrently(string phoneNumbers, string port, string message)
        {
            try
            {
                var formattedNumbers = FormatPhoneNumbers(phoneNumbers);

                if (formattedNumbers.Count == 0)
                {
                    MessageBox.Show("Please enter valid phone numbers.");
                    return false;
                }

                serialPort.PortName = port;
                serialPort.Open();

                SendCommand("AT");
                SendCommand("AT+CMGF=1");
                SendCommand("AT+CSCS=\"GSM\"");

                // Create tasks for sending SMS concurrently
                var sendSmsTasks = formattedNumbers.Select(phoneNumber => SendSmsToRecipient(phoneNumber, message)).ToList();

                await Task.WhenAll(sendSmsTasks);  // Wait for all SMS sending tasks to complete

                serialPort.Close();
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error sending SMS: {ex.Message}");
                return false;
            }
        }

        // Method to send SMS to a single recipient
        private async Task SendSmsToRecipient(string phoneNumber, string message)
        {
            bool sentSuccessfully = false;
            for (int attempt = 1; attempt <= 5; attempt++) // Retry 5 times
            {
                try
                {
                    SendCommand($"AT+CMGS=\"{phoneNumber}\"");
                    string response = ReadResponse();

                    if (response.Contains(">"))
                    {
                        SendCommand(message + char.ConvertFromUtf32(26)); // Send the message
                        sentSuccessfully = true;
                        break; // Exit retry loop on success
                    }
                }
                catch (Exception ex)
                {
                    // Log the error for debugging
                    Console.WriteLine($"Attempt {attempt} failed for {phoneNumber}: {ex.Message}");
                }

                System.Threading.Thread.Sleep(1000); // 1-second delay between retries
            }

            if (!sentSuccessfully)
            {
                MessageBox.Show($"Failed to send SMS to {phoneNumber} after 5 attempts.");
            }
        }

        // Method to format multiple phone numbers (handles local and international formats)
        private List<string> FormatPhoneNumbers(string phoneNumbers)
        {
            List<string> formattedNumbers = new List<string>();
            var numbers = phoneNumbers.Split(new char[] { ',', ';', ' ' }, StringSplitOptions.RemoveEmptyEntries);

            foreach (var number in numbers)
            {
                string formattedNumber = FormatPhoneNumber(number.Trim());

                // If the formatted number is not empty, add it to the list
                if (!string.IsNullOrEmpty(formattedNumber))
                {
                    formattedNumbers.Add(formattedNumber);
                }
            }

            return formattedNumbers;
        }

        // Method to format a single phone number into international format (+63) if needed
        private string FormatPhoneNumber(string phoneNumber)
        {
            phoneNumber = phoneNumber.Replace(" ", "").Replace("-", "");  // Remove spaces and hyphens

            // If the phone number starts with "09" and is 11 digits long, convert it to international format
            if (phoneNumber.StartsWith("09") && phoneNumber.Length == 11)
            {
                phoneNumber = "+63" + phoneNumber.Substring(1);  // Convert local number (09) to international (+63)
            }
            else if (phoneNumber.StartsWith("+63") && phoneNumber.Length == 13)
            {
                // If the number is already in international format (+63), leave it unchanged
                return phoneNumber;
            }
            else
            {
                // If the phone number is invalid or in an incorrect format
                return string.Empty;  // Return empty string to indicate an invalid phone number
            }

            return phoneNumber;
        }

        private string ReadResponse()
        {
            string response = string.Empty;

            // Read the response from the serial port
            try
            {
                if (serialPort.IsOpen)
                {
                    response = serialPort.ReadExisting(); // Read any existing data from the port
                }
            }
            catch (Exception ex)
            {
                response = $"Error reading from serial port: {ex.Message}";
            }

            return response;
        }

        private void SendCommand(string command)
        {
            if (serialPort.IsOpen)
            {
                serialPort.WriteLine(command);
                System.Threading.Thread.Sleep(500);  // Small delay to ensure the command is processed
            }
        }

        private bool HasAtLeastTwoPhoneNumbers(string phoneNumbers)
        {
            var formattedNumbers = FormatPhoneNumbers(phoneNumbers);
            return formattedNumbers.Count >= 2;
        }



        private void ClearForm()
        {
            Dnametxt.Text = string.Empty;
            assNametxt.Text = string.Empty;
            DisteTxt.Text = string.Empty;
            cubicmeterTXT.Text = string.Empty;
            truckCmb.SelectedIndex = 0;
            driverIdCmb.SelectedIndex = 0;
            assIdCmb.SelectedIndex = 0;
            itemCmb.SelectedIndex = -1;
            companyCmb.SelectedIndex = -1; 
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {
            ClearForm();
        }

        private void TruckCmb_SelectedIndexChanged(object sender, EventArgs e)
        {
        }

        private void assIdCmb_SelectedIndexChanged_1(object sender, EventArgs e)
        {
        }

        private void pictureBox1_Click_1(object sender, EventArgs e)
        {
            this.Close();
        }

        private void add_task_Load(object sender, EventArgs e)
        {

        }

        private void txtNumber_TextChanged(object sender, EventArgs e)
        {

        }


     
    }
}